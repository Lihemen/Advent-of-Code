const input = [
	'....#...#####..##.#..##..#....#',
	'..##.#.#.........#.#......##...',
	'#.#.#.##.##...#.......#...#..#.',
	'..##.............#.#.##.....#..',
	'##......#.............#....#...',
	'.....##..#.....##.#.......##..#',
	'.##.....#........##...##.#....#',
	'.##......#.#......#.....#..##.#',
	'##....#..#...#...#...##.#...##.',
	'##........##.#...##......#.#.#.',
	'..#.#........#...##.....#.....#',
	'..#.......####.#....#..#####...',
	'.##..#..#..##.#.....###.#..#...',
	'......###..##.....#.#.#..###.#.',
	'..#.#...#..##.....#....#.#.....',
	'.....#.#...#.###.#..#..........',
	'##.....#...#.#....#..#.#.......',
	'..#...#...#.........##......#..',
	'......#.#...#...#..#...##.#...#',
	'....#.................##.##....',
	'...#......#.............#....##',
	'##..#..#..........#...##.#.#...',
	'....#...##....#..#.#...........',
	'##.#.#.#...#....#........#..#.#',
	'...###..........#...#...#..##.#',
	'..##.......###.#......##.##....',
	'...........#.#....#.....#.#...#',
	'..#......##.#...##.#.#......#.#',
	'..........#.#....#.#..#....#...',
	'##..##...##.......#.#....#.#.##',
	'.##..#.#..#...........#.#...#.#',
	'#......##......#....####.#....#',
	'..###......##...#...#.#.......#',
	'.#.##.##....##..#..##...#......',
	'.#....#..#........#..#.##.#.#..',
	'..#.........#.#.###....###.#...',
	'..#..#.#.#..#..#.##.##...####..',
	'#..#..#......#..#.#....#.#.#.##',
	'..#.........#...#..#.#.#..#...#',
	'#..#......###.....##....##.....',
	'#..#.....#.#.#.##.....##...#.#.',
	'##..#.#...#.........#.#........',
	'#....#.......#.....#..#..#.#...',
	'...###.##.###.###.#####..#...#.',
	'.....#..#.#..##...............#',
	'..#.....###.###.#.....#.#....##',
	'###.#.........#..#.#.#..#.#..#.',
	'.##.........#..#..##....#.#...#',
	'.#...#........#...#.....#....#.',
	'####..........###....#.#.#....#',
	'....##..###....#....#.#...#....',
	'..............##......##..#.###',
	'.#...........###.#.#....#......',
	'###.#..#..#...#.........##.....',
	'..#.....##...#.#.....##...#.##.',
	'.###.#........#..#.#...#.#..##.',
	'.......##....##.........##.#..#',
	'#....#...#...##...#.#..#..#..##',
	'...#...##..#...#...#.#....#.#.#',
	'#.#......#.#...##......#.#...##',
	'.#.###..#.###.#.....#.##.##.#.#',
	'#...#............#...#.##..##..',
	'....#..###.......#.....##....#.',
	'.#####..#.....#.....#...#.....#',
	'..##..#..###.......##.#........',
	'.#...##.##.....#.##...##...#..#',
	'......###...#....#....#........',
	'....#...#.#....#...#.#.#......#',
	'....#..##...##.#..#....###.....',
	'...#...#..#.#...#....#.#..#####',
	'####....#.....#.........#.#....',
	'...###.#.#..#.#..##............',
	'.##..#####..#...#..#..#.......#',
	'.###......#.#.#..#....#.....#..',
	'#....##.##..#.#...............#',
	'...#.#..#........#......#....#.',
	'#.....#....###....#..#.#.#.....',
	'.#..#....#...#.#.....##....#...',
	'..#.##.#.##.#..#.##.#.....#.#..',
	'.......#.......###..###..#...#.',
	'.#.......#..#........#.#.......',
	'.#.#...#.....#.##..##.....#....',
	'#.......##....#......#.....##..',
	'.#.....#...##...#..##.....#....',
	'....#..#.#.......#.#.#.........',
	'..#....#....##.##..#..##.##.#..',
	'.#...#....##...#........#....#.',
	'#.#......#...#....#...........#',
	'.#....#..#..###.#.....#..#.....',
	'..#..................#.....#...',
	'..#...###..#..####.#..#.#.#.#..',
	'...#........##...##..##..#....#',
	'...#.....#........##..#.....#.#',
	'#....#.....##.##......#...##...',
	'...#####....#..##..##...#.#....',
	'###.........#.#..#..#..##.#...#',
	'##...#..##...#.##.#........#...',
	'.#....#.#...#..#...#..#.#......',
	'.#......##.#...#...#..#....#...',
	'#..#.#.#......##.##.####..#....',
	'.#...#.#.##...##.#...#...#.....',
	'####.#.........#...##..##....##',
	'.....###........###.##...#.#...',
	'.##.....#.....#....##.....##...',
	'.#.#...#####....##...##.....#..',
	'....###..........#......##..#.#',
	'..#.....#....#..#...#.....##..#',
	'...##.##.#.######....#.#....##.',
	'...#.#.#...#..#....##.........#',
	'.#.#...##...#....#.#....##.....',
	'...#..#.....#.....#.##.....#...',
	'.#.#.#.....#.##.#....#.#....##.',
	'#...#......###...#..###...#....',
	'...##.#.#..#........##.......#.',
	'.####.####......#........#.....',
	'....#..#####....#......####....',
	'#...##.#..#..#####.#...#......#',
	'#.#....#..#.........###........',
	'.##.........#....#......#.#....',
	'...###.........####.#........##',
	'..#..#........#.#..##......#..#',
	'.##..#....#...##.####.#...#....',
	'......#.......#..#..#.#.##.#...',
	'.###....#.#...#.#.......##..#.#',
	'#...#....#............#####....',
	'...#.##......#####..#........#.',
	'..#...##.....#...#..#.#........',
	'...#.#...#...##...#..#....#....',
	'..#..##.....#....#.#.###.......',
	'.......##..#...#.............##',
	'.....#.....#..##.##.....#......',
	'.....##...#......#..##....#.###',
	'.#...#.#.#.#.##.....##..###..#.',
	'....##..........#.....###......',
	'....#...#.#.#..#.......#....#..',
	'..###...#...........##..###....',
	'...#.##.......#....#....#.#....',
	'##...#..##..#.##..........##..#',
	'.##.....#..#......##..####.#.##',
	'....##..#.#.###......#..#...#..',
	'####..#.#....#...#....###.#.#..',
	'###......#...##.##..#.##..#..#.',
	'..#.#..#.#.#.....#...#..#.####.',
	'.###.#...##...##....##......#.#',
	'..#............#.##..#....#..#.',
	'###.......#......###..#........',
	'....##......###.....#.#..###...',
	'..#...##...#......#..#.........',
	'#..####.#....#.....###....#.#..',
	'.#.#.#.......##....###.........',
	'.......#.##.#####....#.#...####',
	'.#...#....#....#.###..#.....#..',
	'.###.#.#.###.###.#..####.##.#..',
	'....#.........#.#.......##.....',
	'#..#..#.#...........#.#.##..#.#',
	'.#.....#..#...#.....#.##......#',
	'..###.#............#.....####..',
	'#.....##..##...#....####....#..',
	'...#.....#..................#..',
	'....#.###.#..#..#..##..#..##...',
	'...##.#........#......#...##...',
	'#................##....#...#...',
	'..##......##.#.##..#....#.....#',
	'.#..#.....#..........##.#.#....',
	'.....#...####....#..#......#...',
	'..#......###.#.#.#.#.......#..#',
	'.##......#.......#....###.#....',
	'#..#.#.#..#...#.#.##..##..#....',
	'....#...##..#.#......#.##...#..',
	'...###...#.##..#...#....#......',
	'##......#.#...#.#.#.........#..',
	'..#..........#...###.#.##....#.',
	'...##.....#.....#...###..#.....',
	'..####.#.....#.#.....#..#.#....',
	'.#.....##...##.##.#.....#.####.',
	'.......#.....#...##..........#.',
	'.#...#.#....#####....###.#..#.#',
	'.##.##....##...##.#.....#......',
	'#......#.##..#..##.#.#.......#.',
	'.#..#....###..#........##...#..',
	'..#......##.......###..##...#..',
	'.#..........#.#.......##.....#.',
	'....##.....##.#.#.##........##.',
	'..#.#..###..#..##...#.##...#...',
	'.......#.....#..#...#...#.....#',
	'##.#...#.#.#.##........#......#',
	'..###.....##..#....#.......##..',
	'#####..####...#.#..##.#...#..#.',
	'#...####....#........#....#....',
	'.#.#.#..#...##....#.......#.#..',
	'...#....##..##..#..#..#####.###',
	'...#......#.#..#......#...####.',
	'.##.....##.##.#.####.#..##...#.',
	'....#..#..##..##....#....#...##',
	'##.###........#...##....#.....#',
	'..#.#.#.......#....#..#....#...',
	'......##.....##....#...#.....#.',
	'#.#..#.#.......#....#.#.#......',
	'.....###..#...#.....#..##..#...',
	'......###.....#.#.#...#...##..#',
	'.#..#.#....##...#...#........#.',
	'#..###.#...####.#...#..........',
	'.#.##.#..#..##..#..###..##...#.',
	'.......#.#..........#.........#',
	'#......###..##..#....###.......',
	'..#............#.#........#...#',
	'..##.#.............#......#..##',
	'.#....#..#.#..#....###..#...#..',
	'....##....#..##...###....#....#',
	'.#....###.............#........',
	'#..#...#..#....#.##.#.....##...',
	'...........#.....#....#....#...',
	'.##.##.#...#....##......##..##.',
	'......#.#.##.#..##........#...#',
	'....##...##...#...#...#.#......',
	'.#...#....#...#......#.#...#..#',
	'........##.....#.#..#...##..##.',
	'##...#.....#.....####...#..#...',
	'.#.#..##.##......#...#.#...#...',
	'##...##.#......#....#.######.#.',
	'##.....####.###......#.##.#....',
	'.#.##....##........#...#..####.',
	'.......#..#....##...#.#...#..#.',
	'...##..........#..#........#..#',
	'.##.....#...#...#.##.###.......',
	'.##....#...#.#..#.....#...#....',
	'..#...#.....#.####.#.........#.',
	'#...#.##...#.#..#.#..#.###.#..#',
	'.##..#.#.##.........####....###',
	'.#..##........#..#.......#.....',
	'......#.#####.#.........#.#...#',
	'......#....#.#####...........#.',
	'..##....##..#.#..#....#......##',
	'#.#......#.##.#.##....#....#.#.',
	'..#..##.#...#.......##.........',
	'.....##.#...#..........#.......',
	'...#........#..#...#.....##.###',
	'....##.........#...#.#.....#...',
	'.......#.#....#...#.......#...#',
	'.#..#...##....#..#...........#.',
	'.#....##.##.#..#..####.#.#.....',
	'.##........#.....#..#......##..',
	'.#..##......#......#..##..#....',
	'###.....##.......#..##.#.......',
	'.....##......#.#...##...##.....',
	'.##....##..#..#####...#...#.##.',
	'##...##.#....##.#.#.#....##....',
	'.#.....#...#......#......##....',
	'##.#............#...#....#.....',
	'#..#.....#.....##.##.##..#..##.',
	'......#..............#..#...#.#',
	'....#.#....##......#..#...#....',
	'.#...#..#...#......#..##....#.#',
	'.....#......#..##...#.#....#...',
	'#...............#.##..#......#.',
	'.....#..##.#..#.#...###.....#..',
	'...#..#..#...#....#..#..##.#...',
	'.#...#...#..#......##...#......',
	'....###............#.#.#....#..',
	'#.#...#..#..#.#....#........#..',
	'....#.#.#..#..#....#..#...##.#.',
	'.#....#.#...#....#......#.#...#',
	'##..#.#.#..#.....#...###....#.#',
	'.##.....#.#...#..........#..#.#',
	'#....#......#....#.#.#...#.....',
	'#.#.....#.###.......#..#..#.#..',
	'#.....##..#.###...#...##...#.##',
	'.#.##....#.#.....##......###...',
	'.#.......##................#...',
	'.........#........####......#..',
	'...##.###..#.....#.#.....##.#..',
	'..#....#.#.#.##..........#.....',
	'#..##.....#.............##.....',
	'.##...#..#.......#.......#..#..',
	'...#.................#......##.',
	'....#....#.....#..###.#....###.',
	'..#.#..#...#..#.....###....#.#.',
	'.....###...#....#....#.#.##..##',
	'...#...#.........####........#.',
	'.......#..##.........#.........',
	'.#......##.....#.#####...##....',
	'....#.###...#.#....##..#......#',
	'.##..#....#.#....#..#.###.....#',
	'..#...#.#...#.##.....#.#....##.',
	'#.#.#.#.....##...#.#..##..#....',
	'.#............#.#.#..#...#...#.',
	'...##.#..#..####.#.###..##.....',
	'.##.....#.......#..##.#...##.#.',
	'#.#...#..#.##...##...####..#..#',
	'...##.......#.#.#.#.#.#...#..##',
	'...#.#.##..##..............###.',
	'.....#...#........#...#......#.',
	'..#..#..##....#..##.#.....#....',
	'#.....##........#.........##.#.',
	'###..#....#.##..##.............',
	'.#..#...#.#......#..#..##.....#',
	'...#.#.#............##........#',
	'..#.#....#..#....##....#...##.#',
	'...##...#...#..........##.#####',
	'....#..#.#.......##....#.#.###.',
	'##..#..#..#...###.#.....#......',
	'....###.#.#.#.##..##.#...#.....',
	'.....####..#.#..#.#......#.#.#.',
	'#.....#...#..#.#.........#..#..',
	'.##....#.#.####......##..#..##.',
	'......#.##.#.#..#..#....#.#....',
	'.#..#...#...#...#..#.....#.....',
	'..##.#..............#......#...',
	'.....###.##.......#.....#..#...',
	'..#.#..#..#.......#...##.##..#.',
	'##.###......#......#.#..#..##..',
	'..##.....#..#..#......#..#.....',
	'...##.......#.#..#.........#.#.',
	'......##.##.#.......#..#.#.....',
	'#......#........##..#.......#.#',
	'###....#...#...#.#...#..#..#...',
	'#..###....#....####..#...#.....',
	'....##..#.##.#....#..##...#.#..',
	'#.##..#....##..#...#..#.#.#..#.',
	'#.........#.....#...#.......#..',
	'...#.....#.#.....#........##...',
	'..#.##..#......#...#.....##.#..',
	'...###....#.....#...#..#.##..#.',
];
const testSet = [
	'#.##..#....##..#...#..#.#.#..#.',
	'#.........#.....#...#.......#..',
	'...#..#..#.#.....#........##...',
	'..#.##..##.....#...#.....##.#..',
	'....###....#....#...#..#.##..#.',
];

function createMap(step, end) {
	// Zero index-based Map
	let map = {};
	for (let i = 0; i < end; i++) {
		map[i] = step * i;
	}
	return map;
}
/**
 *
 * @param {String} string The desired string to repeat
 * @param {Number} length The number of the desired length
 */
function extendToDesiredLength(string, length) {
	let repeatLength = Math.ceil(length / string.length);
	let newString = string.repeat(repeatLength);
	let fixedString = newString.substring(0, length);
	return fixedString;
}

// CHALLENGE PART TWO
// WILL TWEAK THE ABOVE FUNCTION TO CATER
// RIGHT 1, DOWN 1 = STEP 1
// RIGHT 5, DOWN 1 = STEP 5
// RIGHT 7, DOWN 7 = STEP 7,
// RIGHT 1, DOWN 2 = ????
function right1Down1(array) {
	const arrangement = [...array];
	const pattern = [];
	const mapped = createMap(1, arrangement.length);
	const maxLength = mapped[arrangement.length - 1];
	const newArr = arrangement.map((el) =>
		extendToDesiredLength(el, maxLength + 1)
	);
	for (let i = 0; i < newArr.length; i++) {
		pattern.push(newArr[i].charAt(mapped[i]));
	}
	const trees = pattern.filter((el) => el === '#').length;
	console.log(trees);
}
right1Down1(input);
// FOR RIGHT 3, DOWN 1
// SOLUTION TO CHALLENGE PART 1
function right3Down1(array) {
	const arrangement = [...array];
	const pattern = [];
	const mapped = createMap(3, arrangement.length);
	const maxLength = mapped[arrangement.length - 1];
	const newArr = arrangement.map((el) =>
		extendToDesiredLength(el, maxLength + 1)
	);
	for (let i = 0; i < newArr.length; i++) {
		pattern.push(newArr[i].charAt(mapped[i]));
	}
	const trees = pattern.filter((el) => el === '#').length;
	console.log(trees);
}
right3Down1(input);
function right5Down1(array) {
	const arrangement = [...array];
	const pattern = [];
	const mapped = createMap(5, arrangement.length);
	const maxLength = mapped[arrangement.length - 1];
	const newArr = arrangement.map((el) =>
		extendToDesiredLength(el, maxLength + 1)
	);
	for (let i = 0; i < newArr.length; i++) {
		pattern.push(newArr[i].charAt(mapped[i]));
	}
	const trees = pattern.filter((el) => el === '#').length;
	console.log(trees);
}
right5Down1(input);
function right7Down1(array) {
	const arrangement = [...array];
	const pattern = [];
	const mapped = createMap(7, arrangement.length);
	const maxLength = mapped[arrangement.length - 1];
	const newArr = arrangement.map((el) =>
		extendToDesiredLength(el, maxLength + 1)
	);
	for (let i = 0; i < newArr.length; i++) {
		pattern.push(newArr[i].charAt(mapped[i]));
	}
	const trees = pattern.filter((el) => el === '#').length;
	console.log(trees);
}
right7Down1(input);
function right1Down2(array) {
	const arrangement = [...array];
	const pattern = [];
	const mapped = createMap(1, arrangement.length);
	const maxLength = mapped[arrangement.length - 1];
	const newArr = arrangement.map((el) =>
		extendToDesiredLength(el, maxLength + 1)
	);
	for (let i = 0; i < newArr.length; i++) {
		if (i % 2 !== 0) {
			pattern.push(newArr[i].charAt(mapped[i]));
		}
	}
	const trees = pattern.filter((el) => el === '#').length;
	console.log(trees);
}
right1Down2(input);
